# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GridRefToXYDialog
                                 A QGIS plugin
 A QGIS plugin for plotting data referenced with the British National Grid (BNG) system. Converts BNG two-letter references to Cartesian (XY) coordinates.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-05-30
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Alexander Camilleri / Jinglelocks
        email                : alexander.camilleri1@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import csv

from qgis.PyQt import uic
from qgis.PyQt.QtWidgets import (
    QDialog, QVBoxLayout, QPushButton, QFileDialog, QLabel, QComboBox, QTableView, QHeaderView, QMessageBox, QWidget
)
from qgis.PyQt.QtGui import QStandardItemModel, QStandardItem

from qgis.PyQt.QtCore import QVariant

from qgis.core import QgsProject, QgsCoordinateReferenceSystem, QgsVectorLayer, QgsField, QgsFeature, QgsGeometry, QgsPointXY

from .grid_reference import GridReference


class GridRefToXYDialog(QDialog):
    def __init__(self):
        """Constructor."""
        super().__init__()
        # set up main dialog window
        self.setWindowTitle("British National Grid to XY")
        self.setGeometry(100, 100, 800, 600)
        # store the selected file path
        self.file_path = None
        # call method to initialise UI
        self.init_ui()

     # method to initiate the ui elements
    def init_ui(self):
        # create a vertical box layout
        self.layout = QVBoxLayout()
        self.setLayout(self.layout)

        # creating browse button in the MainWindow
        self.browse_button = QPushButton("Select CSV...", self)
        # self.browse_button.setGeometry(50, 50, 200, 50)
        # event handling, connects the button click to the browse_file method
        self.browse_button.clicked.connect(self.browse_file)
        self.layout.addWidget(self.browse_button)

        # creating convert grid references button
        self.convert_button = QPushButton("Convert Grid References", self)
        self.convert_button.clicked.connect(self.convert_grid_references)
        self.layout.addWidget(self.convert_button)

        # create export to csv button
        self.export_to_csv_button = QPushButton(
            "Export to CSV", self)
        self.export_to_csv_button.clicked.connect(self.export_to_csv)
        self.layout.addWidget(self.export_to_csv_button)

        # create plot in QGIS button
        self.plot_data_button = QPushButton("Generate vector layer", self)
        self.plot_data_button.clicked.connect(self.plot_grid_references)
        self.layout.addWidget(self.plot_data_button)

        # labels and combo boxes for field mapping
        self.id_label = QLabel("Select ID field: ")
        self.layout.addWidget(self.id_label)
        self.id_combo = QComboBox(self)
        self.layout.addWidget(self.id_combo)

        self.grid_ref_label = QLabel("Select Grid Reference field: ")
        self.layout.addWidget(self.grid_ref_label)
        self.grid_ref_combo = QComboBox(self)
        self.layout.addWidget(self.grid_ref_combo)

        # # table view for data preview
        self.table_view = QTableView(self)
        self.layout.addWidget(self.table_view)

    def browse_file(self):
        #     options = QFileDialog.Options()
        #     file_path, _ = QFileDialog.getOpenFileName(
        #         self, "Open CSV File", "", "CSV Files (*.csv);;All Files (*)", options=options)
        #     if file_path:
        #         self.load_csv(file_path)
        #         self.file_path = file_path
        file_dialog = QFileDialog(self)
        file_dialog.setFileMode(QFileDialog.ExistingFile)
        file_dialog.setNameFilter("CSV Files (*.csv)")

        if file_dialog.exec_():
            file_path = file_dialog.selectedFiles()[0]
            self.load_csv(file_path)
            self.file_path = file_path

    def load_csv(self, file_path):
        with open(file_path, newline='') as csvfile:
            reader = csv.reader(csvfile)
            headers = next(reader)
            self.id_combo.clear()
            self.grid_ref_combo.clear()
            self.id_combo.addItems(headers)
            self.grid_ref_combo.addItems(headers)

            model = QStandardItemModel()
            model.setHorizontalHeaderLabels(headers)
            for row in reader:
                items = [QStandardItem(field) for field in row]
                model.appendRow(items)
            self.table_view.setModel(model)
            self.table_view.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)

    def process_csv(self, file_path):
        grid_references = []
        # open csv file
        with open(file_path, 'r', newline='') as csvfile:
            # create a csv dictionary reader
            reader = csv.DictReader(csvfile)
            # iterate through csv file
            for row in reader:
                # get the id field
                grid_id = row.get(self.id_combo.currentText(), "")
                # get the gridRef field (need to make this mappable)
                grid_ref = row.get(self.grid_ref_combo.currentText(), "")
                # create grid reference object using my convert library
                grid_reference = GridReference(grid_id, grid_ref)
                # call the convert method on the grid reference
                converted = grid_reference.convert_xy()
                # append the converted grid reference to the list
                grid_references.append(converted)
        # method returns the list of converted grid references
        return grid_references

    def export_to_csv(self, converted_data):
        options = QFileDialog.Options()
        save_path, _ = QFileDialog.getSaveFileName(
            self, "Save CSV File", "", "CSV Files (*.csv);;All Files (*)", options=options)
        if save_path:
            try:
                with open(save_path, "w", newline="") as csvfile:
                    fieldnames = ["id", "gridRef", "easting", "northing"]
                    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                    writer.writeheader()
                    for data in converted_data:
                        writer.writerow(data)
                QMessageBox.information(
                    self, "Success", "Data exported successfully")
            except Exception as e:
                QMessageBox.critical(
                    self, "Error", f"An error occurred: {str(e)}")

    def plot_grid_references(self, grid_references):
        # create memory vector layer

        layer = QgsVectorLayer("Point", "Grid References", "memory")
        provider = layer.dataProvider()

        crs = QgsCoordinateReferenceSystem(
            27700, QgsCoordinateReferenceSystem.EpsgCrsId)
        layer.setCrs(crs)

        # add fields to the layer
        provider.addAttributes([QgsField("id", QVariant.String),
                                QgsField("gridRef", QVariant.String),
                                QgsField("easting", QVariant.Int),
                                QgsField("northing", QVariant.Int),
                                ])

        # edit layer
        layer.startEditing()

        print(grid_references)
        # add features to the layer (must come from converted grid references)
        for ref in grid_references:
            try:
                easting = int(ref["easting"])
                northing = int(ref["northing"])
                feature = QgsFeature()
                feature.setGeometry(QgsGeometry.fromPointXY(
                    QgsPointXY(easting, northing)))
                feature.setAttributes(
                    [ref["id"], ref["gridRef"], easting, northing])
                provider.addFeature(feature)
            except ValueError:
                print(
                    f"Invalid easting or northing value for feature {ref['id']}, GridRef: {ref['gridRef']}, Easting: {ref['easting']}, Northing: {ref['northing']}")

        # commit changes and finalize the layer
        layer.commitChanges()
        layer.updateExtents()

        # add the layer to the map
        QgsProject.instance().addMapLayer(layer)

    def convert_grid_references(self):
        if not self.file_path:
            QMessageBox.warning(
                self, "Warning", "Please select a CSV file first.")
            return
        try:
            grid_references = self.process_csv(self.file_path)
            QMessageBox.information(
                self, "Success", "CSV file processed successfully.")
            print("Processed Grid References:", grid_references)

            # call plot to vector layer method
            self.plot_grid_references(grid_references)

            # call export to csv method
            # self.export_to_csv(grid_references)

        except Exception as e:
            QMessageBox.critical(self, "Error", f"An error occurred: {str(e)}")
